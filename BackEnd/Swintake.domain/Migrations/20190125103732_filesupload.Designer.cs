// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Swintake.domain.Data;

namespace Swintake.domain.Migrations
{
    [DbContext(typeof(SwintakeContext))]
    [Migration("20190125103732_filesupload")]
    partial class filesupload
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Swintake.domain.Campaigns.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ClassStartDate");

                    b.Property<string>("Client")
                        .HasMaxLength(60);

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(60);

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");

                    b.HasData(
                        new { Id = new Guid("c14201ea-f85e-4e8d-8bbe-942f53bdfeb2"), ClassStartDate = new DateTime(2019, 3, 25, 11, 37, 31, 605, DateTimeKind.Local), Client = "mixed", Comment = "max 8 candidates", Name = "dotnet class 2019", StartDate = new DateTime(2019, 2, 25, 11, 37, 31, 606, DateTimeKind.Local), Status = 1 },
                        new { Id = new Guid("ce9dd460-3b7c-401e-ba2b-368e2a8bb11d"), ClassStartDate = new DateTime(2019, 1, 25, 11, 37, 31, 608, DateTimeKind.Local), Client = "CM", Comment = "at cm location", Name = "Java academy 2019", StartDate = new DateTime(2019, 1, 25, 11, 37, 31, 608, DateTimeKind.Local), Status = 1 },
                        new { Id = new Guid("7d1ad9ab-b383-4a16-a26e-7f48fc099672"), ClassStartDate = new DateTime(2019, 3, 16, 11, 37, 31, 608, DateTimeKind.Local), Client = "open for all", Comment = "", Name = "Short javascript bootcamp", StartDate = new DateTime(2019, 2, 4, 11, 37, 31, 608, DateTimeKind.Local), Status = 1 }
                    );
                });

            modelBuilder.Entity("Swintake.domain.Candidates.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasMaxLength(60);

                    b.Property<string>("GitHubUsername")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasMaxLength(60);

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Candidates");

                    b.HasData(
                        new { Id = new Guid("b730830f-2630-45b6-98d3-b363ef4afbdd"), Comment = "", Email = "gwen.jamroziak@cegeka.com", FirstName = "Gwen", GitHubUsername = "gwenjamroziak", LastName = "Jamroziak", LinkedIn = "gwenjamroziak", PhoneNumber = "0472020406" },
                        new { Id = new Guid("38f64d79-db9c-43bc-920c-fa4b962ee295"), Comment = "", Email = "caroline.callens@cegeka.com", FirstName = "Caroline", GitHubUsername = "carolinecallens", LastName = "Callens", LinkedIn = "carolinecallens", PhoneNumber = "0472030507" },
                        new { Id = new Guid("54301284-9186-47ac-a42a-a0c2902c7a60"), Comment = "", Email = "siene.dekeyser@cegeka.com", FirstName = "Siene", GitHubUsername = "sienedekeyser", LastName = "Dekeyser", LinkedIn = "sienedekeyser", PhoneNumber = "0472040608" },
                        new { Id = new Guid("fe0a8fc4-10db-4f4e-a4b7-663c4dba777f"), Comment = "", Email = "luc.verhoeven@carglass.be", FirstName = "Luc", GitHubUsername = "lucverhoeven", LastName = "Verhoeven", LinkedIn = "lucverhoeven", PhoneNumber = "0472050403" }
                    );
                });

            modelBuilder.Entity("Swintake.domain.FilesToUpload.FileToUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileContent");

                    b.Property<string>("FileName");

                    b.Property<int>("Filetype");

                    b.Property<byte[]>("UploadedFileContent");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CampaignId");

                    b.Property<Guid>("CandidateId");

                    b.Property<string>("CurrentSelectionStepDescription");

                    b.Property<Guid?>("CurrentSelectionStepJobApplicationId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CurrentSelectionStepJobApplicationId", "CurrentSelectionStepDescription");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.SelectionStep", b =>
                {
                    b.Property<Guid>("JobApplicationId");

                    b.Property<string>("Description")
                        .HasMaxLength(90);

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("JobApplicationId", "Description");

                    b.ToTable("SelectionStep");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SelectionStep");
                });

            modelBuilder.Entity("Swintake.domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("ebf90813-23ed-4e6f-adf3-b43a02b2ef14"), Email = "reinout@switchfully.com", FirstName = "Reinout" },
                        new { Id = new Guid("06fa975b-4c67-4463-b424-13e8a4da7c4a"), Email = "niels@switchfully.com", FirstName = "Niels" }
                    );
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.CvScreening", b =>
                {
                    b.HasBaseType("Swintake.domain.JobApplications.SelectionSteps.SelectionStep");


                    b.ToTable("CvScreening");

                    b.HasDiscriminator().HasValue("CvScreening");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.FinalDecision", b =>
                {
                    b.HasBaseType("Swintake.domain.JobApplications.SelectionSteps.SelectionStep");


                    b.ToTable("FinalDecision");

                    b.HasDiscriminator().HasValue("FinalDecision");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.FirstInterview", b =>
                {
                    b.HasBaseType("Swintake.domain.JobApplications.SelectionSteps.SelectionStep");


                    b.ToTable("FirstInterview");

                    b.HasDiscriminator().HasValue("FirstInterview");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.GroupInterview", b =>
                {
                    b.HasBaseType("Swintake.domain.JobApplications.SelectionSteps.SelectionStep");


                    b.ToTable("GroupInterview");

                    b.HasDiscriminator().HasValue("GroupInterview");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.PhoneScreening", b =>
                {
                    b.HasBaseType("Swintake.domain.JobApplications.SelectionSteps.SelectionStep");


                    b.ToTable("PhoneScreening");

                    b.HasDiscriminator().HasValue("PhoneScreening");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.TestResult", b =>
                {
                    b.HasBaseType("Swintake.domain.JobApplications.SelectionSteps.SelectionStep");


                    b.ToTable("TestResult");

                    b.HasDiscriminator().HasValue("TestResult");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.JobApplication", b =>
                {
                    b.HasOne("Swintake.domain.Campaigns.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Swintake.domain.Candidates.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Swintake.domain.JobApplications.SelectionSteps.SelectionStep", "CurrentSelectionStep")
                        .WithMany()
                        .HasForeignKey("CurrentSelectionStepJobApplicationId", "CurrentSelectionStepDescription");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.SelectionStep", b =>
                {
                    b.HasOne("Swintake.domain.JobApplications.JobApplication", "JobApplication")
                        .WithMany("SelectionSteps")
                        .HasForeignKey("JobApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Swintake.domain.Users.User", b =>
                {
                    b.OwnsOne("Swintake.domain.Users.UserSecurity", "UserSecurity", b1 =>
                        {
                            b1.Property<Guid?>("UserId");

                            b1.Property<string>("AppliedSalt")
                                .HasColumnName("AppliedSalt");

                            b1.Property<string>("PasswordHashedAndSalted")
                                .HasColumnName("PasswordHashed");

                            b1.ToTable("Users");

                            b1.HasOne("Swintake.domain.Users.User")
                                .WithOne("UserSecurity")
                                .HasForeignKey("Swintake.domain.Users.UserSecurity", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new { UserId = new Guid("ebf90813-23ed-4e6f-adf3-b43a02b2ef14"), AppliedSalt = "NgBFEGiYlnKAVlAkBj6Qkg==", PasswordHashedAndSalted = "p1irTnDYNZBcCOfoph9UZaEmX5h4kd/UqkofgCUMMrA=" },
                                new { UserId = new Guid("06fa975b-4c67-4463-b424-13e8a4da7c4a"), AppliedSalt = "rODZhnBsLGRP908sBZiXzg==", PasswordHashedAndSalted = "TeBgBijhTG1++pvIvcEOd0hvSGBE1Po1kh6TFlW097w=" }
                            );
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
